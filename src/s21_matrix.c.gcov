        -:    0:Source:s21_matrix.c
        -:    0:Graph:s21_matrix.gcno
        -:    0:Data:s21_matrix.gcda
        -:    0:Runs:1
        -:    1:#include "s21_matrix.h"
        -:    2:
        -:    3:// создание матриц
      113:    4:int s21_create_matrix(int rows, int columns, matrix_t *result) {
      113:    5:    result->matrix = NULL;
      113:    6:    int mat = INCORRECT_MATRIX;
      113:    7:    if (rows > 0 && columns > 0) {
       98:    8:        result->rows = rows;
       98:    9:        result->columns = columns;
       98:   10:        result->matrix = calloc(rows, sizeof(double *));
       98:   11:        if (result->matrix) {
      323:   12:            for (int i = 0; i < rows; i++) {
      225:   13:                result->matrix[i] = calloc(columns, sizeof(double));
        -:   14:            }
       98:   15:            mat = OK;
        -:   16:        }
        -:   17:    }
      113:   18:    return mat;
        -:   19:}
        -:   20:
        -:   21:// очистка матриц
      113:   22:void s21_remove_matrix(matrix_t *A) {
      113:   23:    if (A->matrix != NULL) {
      323:   24:        for (int i = 0; i < A->rows; i++) {
      225:   25:            if (A->matrix[i] != NULL) free(A->matrix[i]);
        -:   26:        }
       98:   27:        free(A->matrix);
        -:   28:    }
      113:   29:}
        -:   30:
        -:   31:// сравнение матриц
        8:   32:int s21_eq_matrix(matrix_t *A, matrix_t *B) {
        8:   33:    int result = SUCCESS;
        8:   34:    if (A->rows > 0 && A->columns > 0 && B->rows > 0 && B->columns > 0 && A->rows == B->rows &&
        4:   35:        A->columns == B->columns) {
       16:   36:        for (int i = 0; i < A->rows; i++) {
       48:   37:            for (int j = 0; j < A->columns; j++) {
       36:   38:                if (fabs(A->matrix[i][j] - B->matrix[i][j]) > EPS) result = FAILURE;
        -:   39:            }
        -:   40:        }
        -:   41:    } else {
        4:   42:        result = FAILURE;
        -:   43:    }
        8:   44:    return result;
        -:   45:}
        -:   46:
        -:   47:// сложение матриц
        4:   48:int s21_sum_matrix(matrix_t *A, matrix_t *B, matrix_t *result) {
        4:   49:    int sum = OK;
        4:   50:    if (A->rows > 0 && A->columns > 0 && B->rows > 0 && B->columns > 0) {
        3:   51:        if (A->rows == B->rows && A->columns == B->columns) {
        2:   52:            s21_create_matrix(A->rows, A->columns, result);
        8:   53:            for (int i = 0; i < result->rows; i++) {
       24:   54:                for (int j = 0; j < result->columns; j++) {
       18:   55:                    result->matrix[i][j] = A->matrix[i][j] + B->matrix[i][j];
        -:   56:                }
        -:   57:            }
        -:   58:        } else {
        1:   59:            sum = CALCULATION_ERROR;
        -:   60:        }
        -:   61:    } else {
        1:   62:        sum = INCORRECT_MATRIX;
        -:   63:    }
        4:   64:    return sum;
        -:   65:}
        -:   66:
        -:   67:// вычитание матриц
        3:   68:int s21_sub_matrix(matrix_t *A, matrix_t *B, matrix_t *result) {
        3:   69:    int sub = OK;
        3:   70:    if (A->rows > 0 && A->columns > 0 && B->rows > 0 && B->columns > 0) {
        2:   71:        if (A->rows == B->rows && A->columns == B->columns) {
        1:   72:            s21_create_matrix(A->rows, A->columns, result);
        4:   73:            for (int i = 0; i < result->rows; i++) {
       12:   74:                for (int j = 0; j < result->columns; j++) {
        9:   75:                    result->matrix[i][j] = A->matrix[i][j] - B->matrix[i][j];
        -:   76:                }
        -:   77:            }
        -:   78:        } else {
        1:   79:            sub = CALCULATION_ERROR;
        -:   80:        }
        -:   81:    } else {
        1:   82:        sub = INCORRECT_MATRIX;
        -:   83:    }
        3:   84:    return sub;
        -:   85:}
        -:   86:
        -:   87:// умножение матрицы на число
        5:   88:int s21_mult_number(matrix_t *A, double number, matrix_t *result) {
        5:   89:    int mult_num = OK;
        5:   90:    if (A->rows > 0 && A->columns > 0) {
        4:   91:        s21_create_matrix(A->rows, A->columns, result);
       14:   92:        for (int i = 0; i < result->rows; i++) {
       38:   93:            for (int j = 0; j < result->columns; j++) {
       28:   94:                result->matrix[i][j] = A->matrix[i][j] * number;
        -:   95:            }
        -:   96:        }
        -:   97:    } else {
        1:   98:        mult_num = INCORRECT_MATRIX;
        -:   99:    }
        5:  100:    return mult_num;
        -:  101:}
        -:  102:
        -:  103:// умножение двух матриц
        4:  104:int s21_mult_matrix(matrix_t *A, matrix_t *B, matrix_t *result) {
        4:  105:    int mult_mat = OK;
        4:  106:    if (A->rows > 0 && A->columns > 0 && B->rows > 0 && B->columns > 0) {
        3:  107:        if (A->columns == B->rows) {
        2:  108:            s21_create_matrix(A->rows, B->columns, result);
        6:  109:            for (int i = 0; i < result->rows; i++) {
       14:  110:                for (int j = 0; j < result->columns; j++) {
       10:  111:                    result->matrix[i][j] = 0;
       38:  112:                    for (int k = 0; k < B->rows; k++)
       28:  113:                        result->matrix[i][j] += A->matrix[i][k] * B->matrix[k][j];
        -:  114:                }
        -:  115:            }
        -:  116:        } else {
        1:  117:            mult_mat = CALCULATION_ERROR;
        -:  118:        }
        -:  119:    } else {
        1:  120:        mult_mat = INCORRECT_MATRIX;
        -:  121:    }
        4:  122:    return mult_mat;
        -:  123:}
        -:  124:
        -:  125:// транспонирование матрицы
        4:  126:int s21_transpose(matrix_t *A, matrix_t *result) {
        4:  127:    int trans = OK;
        4:  128:    if (A->rows > 0 && A->columns > 0) {
        3:  129:        s21_create_matrix(A->rows, A->columns, result);
       10:  130:        for (int i = 0; i < result->rows; i++) {
       26:  131:            for (int j = 0; j < result->columns; j++) {
       19:  132:                result->matrix[i][j] = A->matrix[j][i];
        -:  133:            }
        -:  134:        }
        -:  135:    } else {
        1:  136:        trans = INCORRECT_MATRIX;
        -:  137:    }
        4:  138:    return trans;
        -:  139:}
        -:  140:
        -:  141:// минор матрицы и матрица алгебраических дополнений
        6:  142:int s21_calc_complements(matrix_t *A, matrix_t *result) {
        6:  143:    int complements = OK;
        6:  144:    if (A->rows > 0 && A->columns > 0) {
        5:  145:        if (A->rows == A->columns) {
        4:  146:            s21_create_matrix(A->rows, A->columns, result);
        4:  147:            if (A->rows == 1) {
        2:  148:                result->matrix[0][0] = 1;
        -:  149:            } else {
        8:  150:                for (int i = 0; i < result->rows; i++) {
       24:  151:                    for (int j = 0; j < result->columns; j++) {
       18:  152:                        matrix_t minor = reduced_matrix(A, i, j);
       18:  153:                        if ((i + j) % 2 == 0) {
       10:  154:                            result->matrix[i][j] = matrix_minor(&minor);
        -:  155:                        } else {
        8:  156:                            result->matrix[i][j] = -1 * matrix_minor(&minor);
        -:  157:                        }
       18:  158:                        s21_remove_matrix(&minor);
        -:  159:                    }
        -:  160:                }
        -:  161:            }
        -:  162:        } else {
        1:  163:            complements = CALCULATION_ERROR;
        -:  164:        }
        -:  165:    } else {
        1:  166:        complements = INCORRECT_MATRIX;
        -:  167:    }
        6:  168:    return complements;
        -:  169:}
        -:  170:
       30:  171:matrix_t reduced_matrix(matrix_t *A, int rows, int columns) {
       30:  172:    matrix_t result = {};
       30:  173:    s21_create_matrix(A->rows - 1, A->columns - 1, &result);
       30:  174:    int k_rows = 0;
      120:  175:    for (int i = 0; i < A->rows; i++) {
       90:  176:        if (i != rows) {
       60:  177:            int k_columns = 0;
      240:  178:            for (int j = 0; j < A->columns; j++) {
      180:  179:                if (j != columns) {
      120:  180:                    result.matrix[k_rows][k_columns] = A->matrix[i][j];
      120:  181:                    k_columns++;
        -:  182:                }
        -:  183:            }
       60:  184:            k_rows++;
        -:  185:        }
        -:  186:    }
       30:  187:    return result;
        -:  188:}
        -:  189:
       36:  190:double matrix_minor(matrix_t *A) {
       36:  191:    double element = 0.0;
       36:  192:    if (A->rows == 1) {
        2:  193:        element = A->matrix[0][0];
       34:  194:    } else if (A->rows == 2) {
       30:  195:        element = A->matrix[0][0] * A->matrix[1][1] - A->matrix[0][1] * A->matrix[1][0];
        -:  196:    } else {
        4:  197:        int sign = 1;
       16:  198:        for (int i = 0; i < A->columns; i++) {
       12:  199:            matrix_t B = reduced_matrix(A, 0, i);
       12:  200:            element += (A->matrix[0][i] * matrix_minor(&B) * sign);
       12:  201:            sign *= -1;
       12:  202:            s21_remove_matrix(&B);
        -:  203:        }
        -:  204:    }
       36:  205:    element = (fabs(element) > EPS) ? element : 0.0;
       36:  206:    return element;
        -:  207:}
        -:  208:
        -:  209:// определитель матрицы
        9:  210:int s21_determinant(matrix_t *A, double *result) {
        9:  211:    int det = OK;
        9:  212:    if (A->rows > 0 && A->columns > 0) {
        8:  213:        if (A->rows == A->columns) {
        6:  214:            *result = matrix_minor(A);
        -:  215:        } else {
        2:  216:            det = CALCULATION_ERROR;
        2:  217:            *result = NAN;
        -:  218:        }
        -:  219:    } else {
        1:  220:        det = INCORRECT_MATRIX;
        1:  221:        *result = NAN;
        -:  222:    }
        9:  223:    return det;
        -:  224:}
        -:  225:
        -:  226:// обратная матрица
        4:  227:int s21_inverse_matrix(matrix_t *A, matrix_t *result) {
        4:  228:    int inv = OK;
        7:  229:    if (A->rows > 0 && A->columns > 0) {
        3:  230:        double det = 0.0;
        3:  231:        int src = s21_determinant(A, &det);
        5:  232:        if (!src && det) {
        -:  233:            matrix_t min, trans;
        2:  234:            s21_calc_complements(A, &min);
        2:  235:            s21_transpose(&min, &trans);
        2:  236:            s21_mult_number(&trans, 1 / det, result);
        2:  237:            s21_remove_matrix(&min);
        2:  238:            s21_remove_matrix(&trans);
        -:  239:        } else {
        1:  240:            inv = CALCULATION_ERROR;
        -:  241:        }
        -:  242:    } else {
        1:  243:        inv = INCORRECT_MATRIX;
        -:  244:    }
        4:  245:    return inv;
        -:  246:}
        -:  247:
        -:  248:// int main() { return 0; }
